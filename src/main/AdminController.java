package main;
/**
 * Portions of this code were generated by the Github Copilot AI
 */

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.KeyEvent;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Path;
import java.util.ResourceBundle;

public class AdminController implements Initializable {
    @FXML
    private TextField wordLength;
    @FXML
    private TableView<FileModel> fileTable;
    @FXML
    private Button addFileBtn;
    @FXML
    private Button returnToStartBtn;

    private ObservableList<FileModel> targetFiles;
    private ObservableList<FileModel> validFiles;
    private static boolean isTargetTable = true;
    private static Button currentTargetBtn;
    private static Button currentValidBtn;


    /**
     *
     * @param url
     * @param resourceBundle
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        wordLength.addEventFilter(KeyEvent.KEY_TYPED, keyEvent -> {
            if (!"0123456789".contains(keyEvent.getCharacter())) {
                keyEvent.consume();
            }
        });
        wordLength.setOnAction(actionEvent -> setWordLength());

        targetFiles = FXCollections.observableArrayList();
        validFiles = FXCollections.observableArrayList();
        fileTable.setItems(targetFiles);

        TableColumn<FileModel, ?> fileColumn = fileTable.getColumns().get(0);
        TableColumn<FileModel, ?> actionColumn = fileTable.getColumns().get(1);

        fileColumn.setCellValueFactory(new PropertyValueFactory<>("file"));
        actionColumn.setCellValueFactory(new PropertyValueFactory<>("actionButton"));

        addFileBtn.disableProperty().bind(wordLength.textProperty().isEmpty());

        returnToStartBtn.setOnAction(actionEvent -> {
            // Return to the start page (WIP)
            try {
                loadAdminDashboard((Stage) returnToStartBtn.getScene().getWindow());
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

    /**
     * This method sets the word length in the WordBank class
     * It first retrieves the text from the TextField named wordLength
     * If the retrieved test is not empyy, it parses the text to an integer and sets it
     * as the word length in the WordBank class.
     */
    public void setWordLength() {
        String length = wordLength.getText();
        if (length.length() > 0) {
            WordBank.setWordLength(Integer.parseInt(length));
        }
    }

    /**
     *
     */
    public void addNewWordFile() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Select main.Word File");
        fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter("Text Files", "*.txt"),
                                                 new FileChooser.ExtensionFilter("CSV Files", "*.csv*"));
        FileModel fileModel = new FileModel(fileChooser.showOpenDialog(null).getName());
        if (isTargetTable) {
            targetFiles.add(fileModel);
        } else {
            validFiles.add(fileModel);
        }
    }

    /**
     *
     * @param stage
     * @throws IOException
     */
    public static void loadAdminDashboard(Stage stage) throws IOException {
        FXMLLoader loader = new FXMLLoader(AdminController.class.getResource("/resources/admin-dashboard.fxml"));
        Parent root = loader.load();
        Scene scene = new Scene(root);
        stage.setScene(scene);
    }

    /**
     *
     */
    public void switchToTargetTable() {
        isTargetTable = true;
        fileTable.setItems(targetFiles);
    }

    /**
     *
     */
    public void switchToValidTable() {
        isTargetTable = false;
        fileTable.setItems(validFiles);
    }

    /**
     *
     */
    public static class FileModel {
        public final String file;
        public final Button actionButton;

        /**
         *
         * @param file
         */
        public FileModel(String file) {
            this.file = file;
            this.actionButton = new Button("Set");

            actionButton.setOnAction(actionEvent -> updateBank());
            updateBtnDisplay();
        }

        /**
         *
         */
        private void updateBank() {
            Path filePath = Path.of(file);
            try {
                if (isTargetTable) {
                    WordBank.updateTargetBank(filePath.toFile());
                } else {
                    WordBank.updateValidBank(filePath.toFile());
                }
            } catch (FileNotFoundException e) {
                System.out.println("File cannot be found or does not exist.");
            }
        }

        /**
         *
         */
        private void updateBtnDisplay() {
            if (isTargetTable) {
                if (currentTargetBtn != null) {
                    currentTargetBtn.setDisable(true);
                    currentTargetBtn.setVisible(false);
                }
                currentTargetBtn = actionButton;
            } else {
                if (currentValidBtn != null) {
                    currentValidBtn.setVisible(false);
                    currentValidBtn.setDisable(true);
                }
                currentValidBtn = actionButton;
            }

            actionButton.setDisable(false);
            actionButton.setVisible(true);

        }

        /**
         *
         * @return
         */
        public String getFile() {
            return file;
        }

        /**
         *
         * @return
         */
        public Button getActionButton() {
            return actionButton;
        }
    }
}
